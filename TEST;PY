import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import copy
import numpy as np
from torchvision import datasets, transforms
import torch
from torch.utils.data import DataLoader, Dataset
from utils.Options import args_parser
from Model import Model_MNIST, CNNCifar, Model_Fashion 
from Client import Client 
from Aggregation.FedAVG import FedAvg
from Aggregation.FedGA import FedGA
from Aggregation.FedPer import FedPer
from Aggregation.FedMA import FedMA
from utils.Split import DatasetSplit
from create_MNIST_datasets import get_MNIST, plot_samples
import matplotlib.pyplot as plt



if __name__ == '__main__':
  # parse args
    args = args_parser()
    args.device = torch.device('cuda:{}'.format(args.gpu) if torch.cuda.is_available() and args.gpu != -1 else 'cpu')

    net_glob = Model_MNIST(args=args).to(args.device)
    net_glob.train() 

    mnist_non_iid_train_dls, mnist_non_iid_test_dls = get_MNIST("non_iid",
    n_samples_train =2000, n_samples_test=1000, n_clients =4, 
    batch_size =100, shuffle =True)
    dict_users={}
    client=Client(0,net_glob, mnist_non_iid_train_dls[0],mnist_non_iid_test_dls[0],args)
    dict_users[0] = client 
    client=Client(1,net_glob, mnist_non_iid_train_dls[1],mnist_non_iid_test_dls[1],args)
    dict_users[1] = client    
    client=Client(2,net_glob, mnist_non_iid_train_dls[2],mnist_non_iid_test_dls[2],args)
    dict_users[2] = client  
    client=Client(3,net_glob, mnist_non_iid_train_dls[3],mnist_non_iid_test_dls[3],args)
    dict_users[3] = client
    c= dict_users[0]
    dict_users[0]= dict_users[3]
    dict_users[3]=c

    ids_users = range(args.num_users)

    for id in ids_users:
      w, loss ,correct = dict_users[id].local_update()
      print('client',id,'Accuracy:',correct)

    

        
